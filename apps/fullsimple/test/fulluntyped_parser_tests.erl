-module(fulluntyped_parser_tests).

-include_lib("eunit/include/eunit.hrl").

data() ->
    {ok, Data} = file:read_file("test/test.f"),
    unicode:characters_to_list(Data).

parser_test() ->
    Data = data(),
    {ok, Tokens, _} = fulluntyped_lexer:string(Data),
    {ok, ParserF} = fulluntyped_parser:parse(Tokens),
    ?assertEqual({[{eval,{3,1},{true,{3,1}}},
                   {eval,{4,1},{if_,{4,1},{false,{4,4}},{true,{4,15}},{false,{4,25}}}},
                   {bind,{6,1},"x",name_bind},
                   {eval,{7,1},{var,{7,1},0,1}},
                   {bind,{9,1},"x",{abb_bind,{true,{9,5}}}},
                   {eval,{10,1},{var,{10,1},0,2}},
                   {eval,{11,1},
                    {if_,{11,1},{var,{11,4},0,2},{false,{11,11}},{var,{11,22},0,2}}},
                   {eval,{13,1},{abs,{13,1},"x",{var,{13,11},0,3}}},
                   {eval,{14,2},
                    {app,{14,2},
                     {abs,{14,2},"x",{var,{14,12},0,3}},
                     {abs,{14,16},
                      "x",
                      {app,{14,26},{var,{14,26},0,3},{var,{14,28},0,3}}}}},
                   {eval,{15,1},{abs,{15,1},"_",{true,{15,11}}}},
                   {eval,{17,1},
                    {record,{17,1},
                     [{"x",{abs,{17,4},"x",{var,{17,13},0,3}}},
                      {"y",
                       {app,{17,19},
                        {abs,{17,19},"x",{var,{17,28},0,3}},
                        {abs,{17,31},"x",{var,{17,40},0,3}}}}]}},
                   {eval,{18,43},
                    {proj,{18,43},
                     {record,{18,1},
                      [{"x",{abs,{18,4},"x",{var,{18,13},0,3}}},
                       {"y",
                        {app,{18,19},
                         {abs,{18,19},"x",{var,{18,28},0,3}},
                         {abs,{18,31},"x",{var,{18,40},0,3}}}}]},
                     "x"}},
                   {eval,{20,1},{string,{20,1},"hello"}},
                   {eval,{22,1},
                    {timesfloat,{22,1},
                     {timesfloat,{22,13},
                      {float,{22,24},2.0},
                      {float,{22,28},3.0}},
                     {timesfloat,{22,34},
                      {float,{22,45},4.0},
                      {float,{22,49},5.0}}}},
                   {eval,{24,1},{zero,{24,1}}},
                   {eval,{25,1},{succ,{25,1},{pred,{25,7},{zero,{25,12}}}}},
                   {eval,{26,1},
                    {is_zero,{26,1},
                     {pred,{26,9},{succ,{26,15},{succ,{26,21},{zero,{26,26}}}}}}},
                   {eval,{28,1},{let_,{28,1},"x",{true,{28,7}},{var,{28,15},0,3}}},
                   {eval,{29,1},{let_,{29,1},"_",{true,{29,7}},{false,{29,15}}}}],
                  [{"x",name_bind},{"x",name_bind}]},
                 ParserF([])).
