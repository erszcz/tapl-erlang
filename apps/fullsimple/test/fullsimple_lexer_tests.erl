-module(fullsimple_lexer_tests).

-include_lib("eunit/include/eunit.hrl").

data() ->
    {ok, Data} = file:read_file("test/test.f"),
    unicode:characters_to_list(Data).

zero_test_() ->
    [?_assertEqual({ok, [{int_value,{1,1},"1"}, {semi,{1,2}}], 1},
                   begin
                       fullsimple_lexer:reset(),
                       fullsimple_lexer:string("1;")
                   end),
     ?_assertEqual({ok, [{int_value,{1,1},"0"}, {semi,{1,2}}], 1},
                   begin
                       fullsimple_lexer:reset(),
                       fullsimple_lexer:string("0;")
                   end),
     ?_assertEqual({ok, [{int_value,{1,1},"9"}, {semi,{1,2}}], 1},
                   begin
                       fullsimple_lexer:reset(),
                       fullsimple_lexer:string("9;")
                   end)].

lexer_test() ->
    Data = data(),
    fullsimple_lexer:reset(),
    %% This fixture was checked token by token to ensure correct lexing of test/test.f,
    %% including the line and column information.
    ?assertEqual({ok,[{comment,{1,1},"/* Examples for testing */"},
                      {true,{3,1}},
                      {semi,{3,5}},
                      {'if',{4,1}},
                      {false,{4,4}},
                      {then,{4,10}},
                      {true,{4,15}},
                      {else,{4,20}},
                      {false,{4,25}},
                      {semi,{4,30}},
                      {lcid,{6,1},"x"},
                      {slash,{6,2}},
                      {semi,{6,3}},
                      {lcid,{7,1},"x"},
                      {semi,{7,2}},
                      {lcid,{9,1},"x"},
                      {eq,{9,3}},
                      {true,{9,5}},
                      {semi,{9,9}},
                      {lcid,{10,1},"x"},
                      {semi,{10,2}},
                      {'if',{11,1}},
                      {lcid,{11,4},"x"},
                      {then,{11,6}},
                      {false,{11,11}},
                      {else,{11,17}},
                      {lcid,{11,22},"x"},
                      {semi,{11,23}},
                      {lambda,{13,1}},
                      {lcid,{13,8},"x"},
                      {dot,{13,9}},
                      {lcid,{13,11},"x"},
                      {semi,{13,12}},
                      {lparen,{14,1}},
                      {lambda,{14,2}},
                      {lcid,{14,9},"x"},
                      {dot,{14,10}},
                      {lcid,{14,12},"x"},
                      {rparen,{14,13}},
                      {lparen,{14,15}},
                      {lambda,{14,16}},
                      {lcid,{14,23},"x"},
                      {dot,{14,24}},
                      {lcid,{14,26},"x"},
                      {lcid,{14,28},"x"},
                      {rparen,{14,29}},
                      {semi,{14,30}},
                      {lambda,{15,1}},
                      {uscore,{15,8}},
                      {dot,{15,9}},
                      {true,{15,11}},
                      {semi,{15,15}},
                      {lcurly,{17,1}},
                      {lcid,{17,2},"x"},
                      {eq,{17,3}},
                      {lambda,{17,4}},
                      {lcid,{17,11},"x"},
                      {dot,{17,12}},
                      {lcid,{17,13},"x"},
                      {comma,{17,14}},
                      {lcid,{17,16},"y"},
                      {eq,{17,17}},
                      {lparen,{17,18}},
                      {lambda,{17,19}},
                      {lcid,{17,26},"x"},
                      {dot,{17,27}},
                      {lcid,{17,28},"x"},
                      {rparen,{17,29}},
                      {lparen,{17,30}},
                      {lambda,{17,31}},
                      {lcid,{17,38},"x"},
                      {dot,{17,39}},
                      {lcid,{17,40},"x"},
                      {rparen,{17,41}},
                      {rcurly,{17,42}},
                      {semi,{17,43}},
                      {lcurly,{18,1}},
                      {lcid,{18,2},"x"},
                      {eq,{18,3}},
                      {lambda,{18,4}},
                      {lcid,{18,11},"x"},
                      {dot,{18,12}},
                      {lcid,{18,13},"x"},
                      {comma,{18,14}},
                      {lcid,{18,16},"y"},
                      {eq,{18,17}},
                      {lparen,{18,18}},
                      {lambda,{18,19}},
                      {lcid,{18,26},"x"},
                      {dot,{18,27}},
                      {lcid,{18,28},"x"},
                      {rparen,{18,29}},
                      {lparen,{18,30}},
                      {lambda,{18,31}},
                      {lcid,{18,38},"x"},
                      {dot,{18,39}},
                      {lcid,{18,40},"x"},
                      {rparen,{18,41}},
                      {rcurly,{18,42}},
                      {dot,{18,43}},
                      {lcid,{18,44},"x"},
                      {semi,{18,45}},
                      {string_value,{20,1},"\"hello\""},
                      {semi,{20,8}},
                      {timesfloat,{22,1}},
                      {lparen,{22,12}},
                      {timesfloat,{22,13}},
                      {float_value,{22,24},"2.0"},
                      {float_value,{22,28},"3.0"},
                      {rparen,{22,31}},
                      {lparen,{22,33}},
                      {timesfloat,{22,34}},
                      {float_value,{22,45},"4.0"},
                      {float_value,{22,49},"5.0"},
                      {rparen,{22,52}},
                      {semi,{22,53}},
                      {int_value,{24,1},"0"},
                      {semi,{24,2}},
                      {succ,{25,1}},
                      {lparen,{25,6}},
                      {pred,{25,7}},
                      {int_value,{25,12},"0"},
                      {rparen,{25,13}},
                      {semi,{25,14}},
                      {iszero,{26,1}},
                      {lparen,{26,8}},
                      {pred,{26,9}},
                      {lparen,{26,14}},
                      {succ,{26,15}},
                      {lparen,{26,20}},
                      {succ,{26,21}},
                      {int_value,{26,26},"0"},
                      {rparen,{26,27}},
                      {rparen,{26,28}},
                      {rparen,{26,29}},
                      {semi,{26,30}},
                      {'let',{28,1}},
                      {lcid,{28,5},"x"},
                      {eq,{28,6}},
                      {true,{28,7}},
                      {in,{28,12}},
                      {lcid,{28,15},"x"},
                      {semi,{28,16}},
                      {'let',{29,1}},
                      {uscore,{29,5}},
                      {eq,{29,6}},
                      {true,{29,7}},
                      {in,{29,12}},
                      {false,{29,15}},
                      {semi,{29,20}}],
                  30},
                 fullsimple_lexer:string(Data)).
