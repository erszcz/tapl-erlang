-module(fulluntyped_lexer_tests).

-include_lib("eunit/include/eunit.hrl").

data() ->
    {ok, Data} = file:read_file("test/test.f"),
    unicode:characters_to_list(Data).

zero_test_() ->
    [?_assertEqual({ok, [{int_value,{1,1},"1"}, {semi,{1,2}}], 1},
                   begin
                       fulluntyped_lexer:reset(),
                       fulluntyped_lexer:string("1;")
                   end),
     ?_assertEqual({ok, [{int_value,{1,1},"0"}, {semi,{1,2}}], 1},
                   begin
                       fulluntyped_lexer:reset(),
                       fulluntyped_lexer:string("0;")
                   end),
     ?_assertEqual({ok, [{int_value,{1,1},"9"}, {semi,{1,2}}], 1},
                   begin
                       fulluntyped_lexer:reset(),
                       fulluntyped_lexer:string("9;")
                   end)].

lexer_test() ->
    Data = data(),
    fulluntyped_lexer:reset(),
    %% This fixture was checked token by token to ensure correct lexing of test/test.f,
    %% including the line and column information.
    ?assertEqual({ok,[{comment,{1,1},"/* Examples for testing */"},
                      {true,{3,1}},
                      {semi,{3,5}},
                      {'if',{4,1}},
                      {false,{4,4}},
                      {then,{4,10}},
                      {true,{4,15}},
                      {else,{4,20}},
                      {false,{4,25}},
                      {semi,{4,30}},
                      {lcid,{6,1}},
                      {slash,{6,2}},
                      {semi,{6,3}},
                      {lcid,{7,1}},
                      {semi,{7,2}},
                      {lcid,{9,1}},
                      {eq,{9,3}},
                      {true,{9,5}},
                      {semi,{9,9}},
                      {lcid,{10,1}},
                      {semi,{10,2}},
                      {'if',{11,1}},
                      {lcid,{11,4}},
                      {then,{11,6}},
                      {false,{11,11}},
                      {else,{11,17}},
                      {lcid,{11,22}},
                      {semi,{11,23}},
                      {lambda,{13,1}},
                      {lcid,{13,8}},
                      {dot,{13,9}},
                      {lcid,{13,11}},
                      {semi,{13,12}},
                      {lparen,{14,1}},
                      {lambda,{14,2}},
                      {lcid,{14,9}},
                      {dot,{14,10}},
                      {lcid,{14,12}},
                      {rparen,{14,13}},
                      {lparen,{14,15}},
                      {lambda,{14,16}},
                      {lcid,{14,23}},
                      {dot,{14,24}},
                      {lcid,{14,26}},
                      {lcid,{14,28}},
                      {rparen,{14,29}},
                      {semi,{14,30}},
                      {lcurly,{16,1}},
                      {lcid,{16,2}},
                      {eq,{16,3}},
                      {lambda,{16,4}},
                      {lcid,{16,11}},
                      {dot,{16,12}},
                      {lcid,{16,13}},
                      {comma,{16,14}},
                      {lcid,{16,16}},
                      {eq,{16,17}},
                      {lparen,{16,18}},
                      {lambda,{16,19}},
                      {lcid,{16,26}},
                      {dot,{16,27}},
                      {lcid,{16,28}},
                      {rparen,{16,29}},
                      {lparen,{16,30}},
                      {lambda,{16,31}},
                      {lcid,{16,38}},
                      {dot,{16,39}},
                      {lcid,{16,40}},
                      {rparen,{16,41}},
                      {rcurly,{16,42}},
                      {semi,{16,43}},
                      {lcurly,{17,1}},
                      {lcid,{17,2}},
                      {eq,{17,3}},
                      {lambda,{17,4}},
                      {lcid,{17,11}},
                      {dot,{17,12}},
                      {lcid,{17,13}},
                      {comma,{17,14}},
                      {lcid,{17,16}},
                      {eq,{17,17}},
                      {lparen,{17,18}},
                      {lambda,{17,19}},
                      {lcid,{17,26}},
                      {dot,{17,27}},
                      {lcid,{17,28}},
                      {rparen,{17,29}},
                      {lparen,{17,30}},
                      {lambda,{17,31}},
                      {lcid,{17,38}},
                      {dot,{17,39}},
                      {lcid,{17,40}},
                      {rparen,{17,41}},
                      {rcurly,{17,42}},
                      {dot,{17,43}},
                      {lcid,{17,44}},
                      {semi,{17,45}},
                      {string_value,{19,1},"\"hello\""},
                      {semi,{19,8}},
                      {timesfloat,{21,1}},
                      {lparen,{21,12}},
                      {timesfloat,{21,13}},
                      {float_value,{21,24},"2.0"},
                      {float_value,{21,28},"3.0"},
                      {rparen,{21,31}},
                      {lparen,{21,33}},
                      {timesfloat,{21,34}},
                      {float_value,{21,45},"4.0"},
                      {float_value,{21,49},"5.0"},
                      {rparen,{21,52}},
                      {semi,{21,53}},
                      {int_value,{23,1},"0"},
                      {semi,{23,2}},
                      {succ,{24,1}},
                      {lparen,{24,6}},
                      {pred,{24,7}},
                      {int_value,{24,12},"0"},
                      {rparen,{24,13}},
                      {semi,{24,14}},
                      {iszero,{25,1}},
                      {lparen,{25,8}},
                      {pred,{25,9}},
                      {lparen,{25,14}},
                      {succ,{25,15}},
                      {lparen,{25,20}},
                      {succ,{25,21}},
                      {int_value,{25,26},"0"},
                      {rparen,{25,27}},
                      {rparen,{25,28}},
                      {rparen,{25,29}},
                      {semi,{25,30}},
                      {'let',{27,1}},
                      {lcid,{27,5}},
                      {eq,{27,6}},
                      {true,{27,7}},
                      {in,{27,12}},
                      {lcid,{27,15}},
                      {semi,{27,16}}],
                  28},
                 fulluntyped_lexer:string(Data)).
