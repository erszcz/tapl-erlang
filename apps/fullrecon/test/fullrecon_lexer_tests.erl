-module(fullrecon_lexer_tests).

-include_lib("eunit/include/eunit.hrl").

data() ->
    {ok, Data} = file:read_file("test/test.f"),
    unicode:characters_to_list(Data).

zero_test_() ->
    [?_assertEqual({ok, [{int_value,{1,1},"1"}, {semi,{1,2}}], 1},
                   begin
                       fullrecon_lexer:reset(),
                       fullrecon_lexer:string("1;")
                   end),
     ?_assertEqual({ok, [{int_value,{1,1},"0"}, {semi,{1,2}}], 1},
                   begin
                       fullrecon_lexer:reset(),
                       fullrecon_lexer:string("0;")
                   end),
     ?_assertEqual({ok, [{int_value,{1,1},"9"}, {semi,{1,2}}], 1},
                   begin
                       fullrecon_lexer:reset(),
                       fullrecon_lexer:string("9;")
                   end)].

lexer_test() ->
    Data = data(),
    fullrecon_lexer:reset(),
    %% This fixture was checked token by token to ensure correct lexing of test/test.f,
    %% including the line and column information.
    ?assertEqual({ok,[{comment,{1,1},"/* Examples for testing */"},
                      {lambda,{4,2}},
                      {lcid,{4,9},"x"},
                      {colon,{4,10}},
                      {lt,{4,11}},
                      {lcid,{4,12},"a"},
                      {colon,{4,13}},
                      {bool,{4,14}},
                      {comma,{4,18}},
                      {lcid,{4,19},"b"},
                      {colon,{4,20}},
                      {bool,{4,21}},
                      {gt,{4,25}},
                      {dot,{4,26}},
                      {lcid,{4,28},"x"},
                      {semi,{4,29}},
                      {string_value,{7,1},"\"hello\""},
                      {semi,{7,8}},
                      {unit,{9,1}},
                      {semi,{9,5}},
                      {lambda,{11,1}},
                      {lcid,{11,8},"x"},
                      {colon,{11,9}},
                      {ucid,{11,10},"A"},
                      {dot,{11,11}},
                      {lcid,{11,13},"x"},
                      {semi,{11,14}},
                      {'let',{13,1}},
                      {lcid,{13,5},"x"},
                      {eq,{13,6}},
                      {true,{13,7}},
                      {in,{13,12}},
                      {lcid,{13,15},"x"},
                      {semi,{13,16}},
                      {timesfloat,{15,1}},
                      {float_value,{15,12},"2.0"},
                      {float_value,{15,16},"3.14159"},
                      {semi,{15,23}},
                      {lcurly,{17,1}},
                      {lcid,{17,2},"x"},
                      {eq,{17,3}},
                      {true,{17,4}},
                      {comma,{17,8}},
                      {lcid,{17,10},"y"},
                      {eq,{17,11}},
                      {false,{17,12}},
                      {rcurly,{17,17}},
                      {semi,{17,18}},
                      {lcurly,{18,1}},
                      {lcid,{18,2},"x"},
                      {eq,{18,3}},
                      {true,{18,4}},
                      {comma,{18,8}},
                      {lcid,{18,10},"y"},
                      {eq,{18,11}},
                      {false,{18,12}},
                      {rcurly,{18,17}},
                      {dot,{18,18}},
                      {lcid,{18,19},"x"},
                      {semi,{18,20}},
                      {lcurly,{19,1}},
                      {true,{19,2}},
                      {comma,{19,6}},
                      {false,{19,8}},
                      {rcurly,{19,13}},
                      {semi,{19,14}},
                      {lcurly,{20,1}},
                      {true,{20,2}},
                      {comma,{20,6}},
                      {false,{20,8}},
                      {rcurly,{20,13}},
                      {dot,{20,14}},
                      {int_value,{20,15},"1"},
                      {semi,{20,16}},
                      {lambda,{23,1}},
                      {lcid,{23,8},"x"},
                      {colon,{23,9}},
                      {bool,{23,10}},
                      {dot,{23,14}},
                      {lcid,{23,16},"x"},
                      {semi,{23,17}},
                      {lparen,{24,1}},
                      {lambda,{24,2}},
                      {lcid,{24,9},"x"},
                      {colon,{24,10}},
                      {bool,{24,11}},
                      {arrow,{24,15}},
                      {bool,{24,17}},
                      {dot,{24,21}},
                      {'if',{24,23}},
                      {lcid,{24,26},"x"},
                      {false,{24,28}},
                      {then,{24,34}},
                      {true,{24,39}},
                      {else,{24,44}},
                      {false,{24,49}},
                      {rparen,{24,54}},
                      {lparen,{25,3}},
                      {lambda,{25,4}},
                      {lcid,{25,11},"x"},
                      {colon,{25,12}},
                      {bool,{25,13}},
                      {dot,{25,17}},
                      {'if',{25,19}},
                      {lcid,{25,22},"x"},
                      {then,{25,24}},
                      {false,{25,29}},
                      {else,{25,35}},
                      {true,{25,40}},
                      {rparen,{25,44}},
                      {semi,{25,45}},
                      {lambda,{27,1}},
                      {lcid,{27,8},"x"},
                      {colon,{27,9}},
                      {nat,{27,10}},
                      {dot,{27,13}},
                      {succ,{27,15}},
                      {lcid,{27,20},"x"},
                      {semi,{27,21}},
                      {lparen,{28,1}},
                      {lambda,{28,2}},
                      {lcid,{28,9},"x"},
                      {colon,{28,10}},
                      {nat,{28,11}},
                      {dot,{28,14}},
                      {succ,{28,16}},
                      {lparen,{28,21}},
                      {succ,{28,22}},
                      {lcid,{28,27},"x"},
                      {rparen,{28,28}},
                      {rparen,{28,29}},
                      {lparen,{28,31}},
                      {succ,{28,32}},
                      {int_value,{28,37},"0"},
                      {rparen,{28,38}},
                      {semi,{28,39}},
                      {ucid,{30,1},"T"},
                      {eq,{30,3}},
                      {nat,{30,5}},
                      {arrow,{30,8}},
                      {nat,{30,10}},
                      {semi,{30,13}},
                      {lambda,{31,1}},
                      {lcid,{31,8},"f"},
                      {colon,{31,9}},
                      {ucid,{31,10},"T"},
                      {dot,{31,11}},
                      {lambda,{31,13}},
                      {lcid,{31,20},"x"},
                      {colon,{31,21}},
                      {nat,{31,22}},
                      {dot,{31,25}},
                      {lcid,{31,27},"f"},
                      {lparen,{31,29}},
                      {lcid,{31,30},"f"},
                      {lcid,{31,32},"x"},
                      {rparen,{31,33}},
                      {semi,{31,34}}],
                  33},
                 fullrecon_lexer:string(Data)).
