-module(fullrecon_lexer_tests).

-include_lib("eunit/include/eunit.hrl").

data() ->
    {ok, Data} = file:read_file("test/test.f"),
    unicode:characters_to_list(Data).

zero_test_() ->
    [?_assertEqual({ok, [{int_value,{1,1},"1"}, {semi,{1,2}}], 1},
                   begin
                       fullrecon_lexer:reset(),
                       fullrecon_lexer:string("1;")
                   end),
     ?_assertEqual({ok, [{int_value,{1,1},"0"}, {semi,{1,2}}], 1},
                   begin
                       fullrecon_lexer:reset(),
                       fullrecon_lexer:string("0;")
                   end),
     ?_assertEqual({ok, [{int_value,{1,1},"9"}, {semi,{1,2}}], 1},
                   begin
                       fullrecon_lexer:reset(),
                       fullrecon_lexer:string("9;")
                   end)].

lexer_test() ->
    Data = data(),
    fullrecon_lexer:reset(),
    %% This fixture was checked token by token to ensure correct lexing of test/test.f,
    %% including the line and column information.
    ?assertEqual({ok,[{comment,{1,1},"/* Examples for testing */"},
                      {'let',{3,2}},
                      {lcid,{3,6},"x"},
                      {eq,{3,7}},
                      {true,{3,8}},
                      {in,{3,13}},
                      {lcid,{3,16},"x"},
                      {semi,{3,17}},
                      {lambda,{5,1}},
                      {lcid,{5,8},"x"},
                      {colon,{5,9}},
                      {bool,{5,10}},
                      {dot,{5,14}},
                      {lcid,{5,16},"x"},
                      {semi,{5,17}},
                      {lparen,{6,1}},
                      {lambda,{6,2}},
                      {lcid,{6,9},"x"},
                      {colon,{6,10}},
                      {bool,{6,11}},
                      {arrow,{6,15}},
                      {bool,{6,17}},
                      {dot,{6,21}},
                      {'if',{6,23}},
                      {lcid,{6,26},"x"},
                      {false,{6,28}},
                      {then,{6,34}},
                      {true,{6,39}},
                      {else,{6,44}},
                      {false,{6,49}},
                      {rparen,{6,54}},
                      {lparen,{7,3}},
                      {lambda,{7,4}},
                      {lcid,{7,11},"x"},
                      {colon,{7,12}},
                      {bool,{7,13}},
                      {dot,{7,17}},
                      {'if',{7,19}},
                      {lcid,{7,22},"x"},
                      {then,{7,24}},
                      {false,{7,29}},
                      {else,{7,35}},
                      {true,{7,40}},
                      {rparen,{7,44}},
                      {semi,{7,45}},
                      {lambda,{9,1}},
                      {lcid,{9,8},"x"},
                      {colon,{9,9}},
                      {nat,{9,10}},
                      {dot,{9,13}},
                      {succ,{9,15}},
                      {lcid,{9,20},"x"},
                      {semi,{9,21}},
                      {lparen,{10,1}},
                      {lambda,{10,2}},
                      {lcid,{10,9},"x"},
                      {colon,{10,10}},
                      {nat,{10,11}},
                      {dot,{10,14}},
                      {succ,{10,16}},
                      {lparen,{10,21}},
                      {succ,{10,22}},
                      {lcid,{10,27},"x"},
                      {rparen,{10,28}},
                      {rparen,{10,29}},
                      {lparen,{10,31}},
                      {succ,{10,32}},
                      {int_value,{10,37},"0"},
                      {rparen,{10,38}},
                      {semi,{10,39}},
                      {lambda,{12,1}},
                      {lcid,{12,8},"x"},
                      {colon,{12,9}},
                      {ucid,{12,10},"A"},
                      {dot,{12,11}},
                      {lcid,{12,13},"x"},
                      {semi,{12,14}},
                      {lparen,{15,1}},
                      {lambda,{15,2}},
                      {lcid,{15,9},"x"},
                      {colon,{15,10}},
                      {ucid,{15,11},"X"},
                      {dot,{15,12}},
                      {lambda,{15,14}},
                      {lcid,{15,21},"y"},
                      {colon,{15,22}},
                      {ucid,{15,23},"X"},
                      {arrow,{15,24}},
                      {ucid,{15,26},"X"},
                      {dot,{15,27}},
                      {lcid,{15,29},"y"},
                      {lcid,{15,31},"x"},
                      {rparen,{15,32}},
                      {semi,{15,33}},
                      {lparen,{16,1}},
                      {lambda,{16,2}},
                      {lcid,{16,9},"x"},
                      {colon,{16,10}},
                      {ucid,{16,11},"X"},
                      {arrow,{16,12}},
                      {ucid,{16,14},"X"},
                      {dot,{16,15}},
                      {lcid,{16,17},"x"},
                      {int_value,{16,19},"0"},
                      {rparen,{16,20}},
                      {lparen,{16,22}},
                      {lambda,{16,23}},
                      {lcid,{16,30},"y"},
                      {colon,{16,31}},
                      {nat,{16,32}},
                      {dot,{16,35}},
                      {lcid,{16,37},"y"},
                      {rparen,{16,38}},
                      {semi,{16,39}},
                      {lparen,{20,1}},
                      {lambda,{20,2}},
                      {lcid,{20,9},"x"},
                      {dot,{20,10}},
                      {lcid,{20,12},"x"},
                      {int_value,{20,14},"0"},
                      {rparen,{20,15}},
                      {semi,{20,16}},
                      {'let',{21,1}},
                      {lcid,{21,5},"f"},
                      {eq,{21,7}},
                      {lambda,{21,9}},
                      {lcid,{21,16},"x"},
                      {dot,{21,17}},
                      {lcid,{21,19},"x"},
                      {in,{21,21}},
                      {lparen,{21,24}},
                      {lcid,{21,25},"f"},
                      {lcid,{21,27},"f"},
                      {rparen,{21,28}},
                      {lparen,{21,30}},
                      {lcid,{21,31},"f"},
                      {int_value,{21,33},"0"},
                      {rparen,{21,34}},
                      {semi,{21,35}},
                      {'let',{22,1}},
                      {lcid,{22,5},"g"},
                      {eq,{22,7}},
                      {lambda,{22,9}},
                      {lcid,{22,16},"x"},
                      {dot,{22,17}},
                      {int_value,{22,19},"1"},
                      {in,{22,21}},
                      {lcid,{22,24},"g"},
                      {lparen,{22,26}},
                      {lcid,{22,27},"g"},
                      {lcid,{22,29},"g"},
                      {rparen,{22,30}},
                      {semi,{22,31}}],
                  24},
                 fullrecon_lexer:string(Data)).
